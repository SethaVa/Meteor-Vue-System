{"metadata":{},"options":{"plugins":[{"key":"/Users/rabbit/Desktop/app/bad-system/node_modules/babel-plugin-transform-vue-jsx/index.js","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/rabbit/Desktop/app/bad-system/imports/client/pages/UserNew.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx","dynamicImport",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"/Users/rabbit/Desktop/app/bad-system/imports/client/pages/UserNew.vue","filename":"/Users/rabbit/Desktop/app/bad-system/imports/client/pages/UserNew.vue","passPerPreset":false,"envName":"development","cwd":"/Users/rabbit/Desktop/app/bad-system","root":"/Users/rabbit/Desktop/app/bad-system","generatorOpts":{"filename":"/Users/rabbit/Desktop/app/bad-system/imports/client/pages/UserNew.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/Users/rabbit/Desktop/app/bad-system/imports/client/pages/UserNew.vue"}},"code":"var _;\n\nmodule.link(\"lodash\", {\n  \"default\": function (v) {\n    _ = v;\n  }\n}, 0);\nvar Msg;\nmodule.link(\"/imports/client/lib/message\", {\n  \"default\": function (v) {\n    Msg = v;\n  }\n}, 1);\nvar Notify;\nmodule.link(\"/imports/client/lib/notify\", {\n  \"default\": function (v) {\n    Notify = v;\n  }\n}, 2);\nvar LookupValue;\nmodule.link(\"../lib/Lookup-Value\", {\n  \"default\": function (v) {\n    LookupValue = v;\n  }\n}, 3);\nvar lookupRole, lookupBranch;\nmodule.link(\"/imports/utils/lookup-methods\", {\n  lookupRole: function (v) {\n    lookupRole = v;\n  },\n  lookupBranch: function (v) {\n    lookupBranch = v;\n  }\n}, 4);\nvar validateUserExist;\nmodule.link(\"/imports/utils/validate-methods\", {\n  validateUserExist: function (v) {\n    validateUserExist = v;\n  }\n}, 5);\nvar insertUser;\nmodule.link(\"../../api/users/methods\", {\n  insertUser: function (v) {\n    insertUser = v;\n  }\n}, 6);\nmodule.exportDefault({\n  name: 'UserNew',\n  data: function () {\n    var _this = this;\n\n    // Custom validate\n    var validateUsername = function (rule, value, callback) {\n      if (value) {\n        validateUserExist.callPromise({\n          username: value\n        }).then(function (result) {\n          if (result) {\n            callback(new Error('Username exist'));\n          } else {\n            callback();\n          }\n        }).catch(function (error) {\n          Notify.error({\n            message: error\n          });\n        });\n      }\n    };\n\n    var validateEmail = function (rule, value, callback) {\n      if (value) {\n        validateUserExist.callPromise({\n          emails: {\n            $elemMatch: {\n              address: value\n            }\n          }\n        }).then(function (result) {\n          if (result) {\n            callback(new Error('Email exist'));\n          } else {\n            callback();\n          }\n        }).catch(function (error) {\n          Notify.error({\n            message: error\n          });\n        });\n      }\n    };\n\n    var validatePassword = function (rule, value, callback) {\n      if (value) {\n        if (_this.form.confirmPassword !== '') {\n          _this.$refs.form.validateField('confirmPassword');\n        }\n\n        callback();\n      }\n    };\n\n    var validateConfirmPassword = function (rule, value, callback) {\n      if (value && value !== _this.form.password) {\n        callback(new Error(\"The password don't match!\"));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      loading: false,\n      // roleOpts: LookupValue.roles,\n      roleOpts: [],\n      statusOpts: LookupValue.status,\n      branchPermissionOpts: [],\n      form: {\n        fullName: '',\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        status: '',\n        allowedBranches: [],\n        roles: []\n      },\n      rules: {\n        fullName: [{\n          required: true,\n          message: 'Full name is required'\n        }],\n        username: [{\n          required: true,\n          message: 'Username is required'\n        }, {\n          min: 5,\n          max: 20,\n          message: 'Length should be 5 to 20',\n          trigger: 'blur'\n        }, {\n          validator: validateUsername,\n          trigger: 'blur'\n        }],\n        email: [{\n          required: true,\n          message: 'Email is required'\n        }, {\n          type: 'email',\n          message: 'Email is not a valid email'\n        }, {\n          validator: validateEmail,\n          trigger: 'blur'\n        }],\n        status: [{\n          required: true,\n          message: 'Status is required'\n        }],\n        password: [{\n          required: true,\n          message: 'Password is required'\n        }, {\n          min: 6,\n          message: 'Length should be greater than 6',\n          trigger: 'blur'\n        }, {\n          validator: validatePassword,\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          required: true,\n          message: 'Confirm password is required'\n        }, {\n          min: 6,\n          message: 'Length should be greater than 6',\n          trigger: 'blur'\n        }, {\n          validator: validateConfirmPassword,\n          trigger: 'blur'\n        }],\n        allowedBranches: [{\n          required: true,\n          message: 'Branches is required'\n        }],\n        roles: [{\n          required: true,\n          message: 'Branches is required'\n        }]\n      }\n    };\n  },\n  computed: {\n    formSize: function () {\n      return this.$store.getters['app/formInterface'];\n    }\n  },\n  mounted: function () {\n    this.getRoles();\n    this.getBranches();\n  },\n  methods: {\n    getRoles: function () {\n      var _this2 = this;\n\n      lookupRole.callPromise().then(function (result) {\n        _this2.roleOpts = result;\n      }).catch(function (error) {\n        Notify.error({\n          message: error\n        });\n      });\n    },\n    getBranches: function () {\n      var _this3 = this;\n\n      lookupBranch.callPromise({}).then(function (result) {\n        _this3.branchPermissionOpts = result;\n      }).catch(function (error) {\n        Notify.error({\n          message: error\n        });\n      });\n    },\n    submitForm: function () {\n      var _this4 = this;\n\n      this.$refs['form'].validate(function (valid) {\n        if (valid) {\n          _this4.loading = true; // Make data\n\n          var data = _.clone(_this4.form);\n\n          delete data.confirmPassword;\n          insertUser.callPromise({\n            user: data\n          }).then(function (result) {\n            if (result) {\n              _this4.loading = false;\n              Msg.success();\n\n              _this4.resetForm();\n            }\n          }).catch(function (error) {\n            _this4.loading = false;\n            console.log(error);\n            Notify.error({\n              message: error.reason\n            });\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    resetForm: function () {\n      this.$refs['form'].resetFields();\n    },\n    handleClose: function () {\n      this.$emit('modal-close');\n    }\n  }\n});","map":{"version":3,"sources":["/Users/rabbit/Desktop/app/bad-system/imports/client/pages/UserNew.vue"],"names":["_","module","link","v","Msg","Notify","LookupValue","lookupRole","lookupBranch","validateUserExist","insertUser","exportDefault","name","data","validateUsername","rule","value","callback","callPromise","username","then","result","Error","catch","error","message","validateEmail","emails","$elemMatch","address","validatePassword","form","confirmPassword","$refs","validateField","validateConfirmPassword","password","loading","roleOpts","statusOpts","status","branchPermissionOpts","fullName","email","allowedBranches","roles","rules","required","min","max","trigger","validator","type","computed","formSize","$store","getters","mounted","getRoles","getBranches","methods","submitForm","validate","valid","clone","user","success","resetForm","console","log","reason","resetFields","handleClose","$emit"],"mappings":"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","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport _ from 'lodash'\nimport Msg from '/imports/client/lib/message'\nimport Notify from '/imports/client/lib/notify'\n// lib\nimport LookupValue from '../lib/Lookup-Value'\n\nimport { lookupRole, lookupBranch } from '/imports/utils/lookup-methods'\nimport { validateUserExist } from '/imports/utils/validate-methods'\nimport { insertUser } from '../../api/users/methods'\n\nexport default {\n  name: 'UserNew',\n  data() {\n    // Custom validate\n    const validateUsername = (rule, value, callback) => {\n      if (value) {\n        validateUserExist\n          .callPromise({ username: value })\n          .then(result => {\n            if (result) {\n              callback(new Error('Username exist'))\n            } else {\n              callback()\n            }\n          })\n          .catch(error => {\n            Notify.error({ message: error })\n          })\n      }\n    }\n\n    const validateEmail = (rule, value, callback) => {\n      if (value) {\n        validateUserExist\n          .callPromise({ emails: { $elemMatch: { address: value } } })\n          .then(result => {\n            if (result) {\n              callback(new Error('Email exist'))\n            } else {\n              callback()\n            }\n          })\n          .catch(error => {\n            Notify.error({ message: error })\n          })\n      }\n    }\n\n    const validatePassword = (rule, value, callback) => {\n      if (value) {\n        if (this.form.confirmPassword !== '') {\n          this.$refs.form.validateField('confirmPassword')\n        }\n        callback()\n      }\n    }\n\n    const validateConfirmPassword = (rule, value, callback) => {\n      if (value && value !== this.form.password) {\n        callback(new Error(\"The password don't match!\"))\n      } else {\n        callback()\n      }\n    }\n\n    return {\n      loading: false,\n      // roleOpts: LookupValue.roles,\n      roleOpts: [],\n      statusOpts: LookupValue.status,\n      branchPermissionOpts: [],\n      form: {\n        fullName: '',\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        status: '',\n        allowedBranches: [],\n        roles: [],\n      },\n      rules: {\n        fullName: [{ required: true, message: 'Full name is required' }],\n        username: [\n          { required: true, message: 'Username is required' },\n          {\n            min: 5,\n            max: 20,\n            message: 'Length should be 5 to 20',\n            trigger: 'blur',\n          },\n          { validator: validateUsername, trigger: 'blur' },\n        ],\n        email: [\n          { required: true, message: 'Email is required' },\n          { type: 'email', message: 'Email is not a valid email' },\n          { validator: validateEmail, trigger: 'blur' },\n        ],\n        status: [{ required: true, message: 'Status is required' }],\n        password: [\n          { required: true, message: 'Password is required' },\n          {\n            min: 6,\n            message: 'Length should be greater than 6',\n            trigger: 'blur',\n          },\n          { validator: validatePassword, trigger: 'blur' },\n        ],\n        confirmPassword: [\n          { required: true, message: 'Confirm password is required' },\n          {\n            min: 6,\n            message: 'Length should be greater than 6',\n            trigger: 'blur',\n          },\n          { validator: validateConfirmPassword, trigger: 'blur' },\n        ],\n        allowedBranches: [{ required: true, message: 'Branches is required' }],\n        roles: [{ required: true, message: 'Branches is required' }],\n      },\n    }\n  },\n  computed: {\n    formSize() {\n      return this.$store.getters['app/formInterface']\n    },\n  },\n\n  mounted() {\n    this.getRoles()\n    this.getBranches()\n  },\n  methods: {\n    getRoles() {\n      lookupRole\n        .callPromise()\n        .then(result => {\n          this.roleOpts = result\n        })\n        .catch(error => {\n          Notify.error({ message: error })\n        })\n    },\n    getBranches() {\n      lookupBranch\n        .callPromise({})\n        .then(result => {\n          this.branchPermissionOpts = result\n        })\n        .catch(error => {\n          Notify.error({ message: error })\n        })\n    },\n    submitForm() {\n      this.$refs['form'].validate(valid => {\n        if (valid) {\n          this.loading = true\n\n          // Make data\n          const data = _.clone(this.form)\n          delete data.confirmPassword\n\n          insertUser\n            .callPromise({ user: data })\n            .then(result => {\n              if (result) {\n                this.loading = false\n                Msg.success()\n                this.resetForm()\n              }\n            })\n            .catch(error => {\n              this.loading = false\n              console.log(error)\n              Notify.error({ message: error.reason })\n            })\n        } else {\n          return false\n        }\n      })\n    },\n    resetForm() {\n      this.$refs['form'].resetFields()\n    },\n    handleClose() {\n      this.$emit('modal-close')\n    },\n  },\n}\n"]},"sourceType":"script","hash":"5e1bdff6801035ab1361ca8a4c80abd978e09ee4"}
