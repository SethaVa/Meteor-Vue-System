{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/vy/Desktop/B.A.D/bad-system/node_modules/vue-data-tables/node_modules/element-ui/packages/tree/src/tree.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"/home/vy/Desktop/B.A.D/bad-system/node_modules/vue-data-tables/node_modules/element-ui/packages/tree/src/tree.vue","filename":"/home/vy/Desktop/B.A.D/bad-system/node_modules/vue-data-tables/node_modules/element-ui/packages/tree/src/tree.vue","passPerPreset":false,"envName":"development","cwd":"/home/vy/Desktop/B.A.D/bad-system","root":"/home/vy/Desktop/B.A.D/bad-system","generatorOpts":{"filename":"/home/vy/Desktop/B.A.D/bad-system/node_modules/vue-data-tables/node_modules/element-ui/packages/tree/src/tree.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/home/vy/Desktop/B.A.D/bad-system/node_modules/vue-data-tables/node_modules/element-ui/packages/tree/src/tree.vue"}},"code":"var TreeStore;\nmodule.link(\"./model/tree-store\", {\n  \"default\": function (v) {\n    TreeStore = v;\n  }\n}, 0);\nvar getNodeKey, findNearestComponent;\nmodule.link(\"./model/util\", {\n  getNodeKey: function (v) {\n    getNodeKey = v;\n  },\n  findNearestComponent: function (v) {\n    findNearestComponent = v;\n  }\n}, 1);\nvar ElTreeNode;\nmodule.link(\"./tree-node.vue\", {\n  \"default\": function (v) {\n    ElTreeNode = v;\n  }\n}, 2);\nvar t;\nmodule.link(\"element-ui/src/locale\", {\n  t: function (v) {\n    t = v;\n  }\n}, 3);\nvar emitter;\nmodule.link(\"element-ui/src/mixins/emitter\", {\n  \"default\": function (v) {\n    emitter = v;\n  }\n}, 4);\nvar addClass, removeClass;\nmodule.link(\"element-ui/src/utils/dom\", {\n  addClass: function (v) {\n    addClass = v;\n  },\n  removeClass: function (v) {\n    removeClass = v;\n  }\n}, 5);\nmodule.exportDefault({\n  name: 'ElTree',\n  mixins: [emitter],\n  components: {\n    ElTreeNode: ElTreeNode\n  },\n  data: function () {\n    return {\n      store: null,\n      root: null,\n      currentNode: null,\n      treeItems: null,\n      checkboxItems: [],\n      dragState: {\n        showDropIndicator: false,\n        draggingNode: null,\n        dropNode: null,\n        allowDrop: true\n      }\n    };\n  },\n  props: {\n    data: {\n      type: Array\n    },\n    emptyText: {\n      type: String,\n      \"default\": function () {\n        return t('el.tree.emptyText');\n      }\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      \"default\": true\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      \"default\": true\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      \"default\": false\n    },\n    autoExpandParent: {\n      type: Boolean,\n      \"default\": true\n    },\n    defaultCheckedKeys: Array,\n    defaultExpandedKeys: Array,\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      \"default\": false\n    },\n    draggable: {\n      type: Boolean,\n      \"default\": false\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      \"default\": function () {\n        return {\n          children: 'children',\n          label: 'label',\n          icon: 'icon',\n          disabled: 'disabled'\n        };\n      }\n    },\n    lazy: {\n      type: Boolean,\n      \"default\": false\n    },\n    highlightCurrent: Boolean,\n    load: Function,\n    filterNodeMethod: Function,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      \"default\": 18\n    }\n  },\n  computed: {\n    children: {\n      set: function (value) {\n        this.data = value;\n      },\n      get: function () {\n        return this.data;\n      }\n    },\n    treeItemArray: function () {\n      return Array.prototype.slice.call(this.treeItems);\n    },\n    isEmpty: function () {\n      var childNodes = this.root.childNodes;\n      return !childNodes || childNodes.length === 0 || childNodes.every(function (_ref) {\n        var visible = _ref.visible;\n        return !visible;\n      });\n    }\n  },\n  watch: {\n    defaultCheckedKeys: function (newVal) {\n      this.store.setDefaultCheckedKey(newVal);\n    },\n    defaultExpandedKeys: function (newVal) {\n      this.store.defaultExpandedKeys = newVal;\n      this.store.setDefaultExpandedKeys(newVal);\n    },\n    data: function (newVal) {\n      this.store.setData(newVal);\n    },\n    checkboxItems: function (val) {\n      Array.prototype.forEach.call(val, function (checkbox) {\n        checkbox.setAttribute('tabindex', -1);\n      });\n    },\n    checkStrictly: function (newVal) {\n      this.store.checkStrictly = newVal;\n    }\n  },\n  methods: {\n    filter: function (value) {\n      if (!this.filterNodeMethod) throw new Error('[Tree] filterNodeMethod is required when filter');\n      this.store.filter(value);\n    },\n    getNodeKey: function (node) {\n      return getNodeKey(this.nodeKey, node.data);\n    },\n    getNodePath: function (data) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in getNodePath');\n      var node = this.store.getNode(data);\n      if (!node) return [];\n      var path = [node.data];\n      var parent = node.parent;\n\n      while (parent && parent !== this.root) {\n        path.push(parent.data);\n        parent = parent.parent;\n      }\n\n      return path.reverse();\n    },\n    getCheckedNodes: function (leafOnly, includeHalfChecked) {\n      return this.store.getCheckedNodes(leafOnly, includeHalfChecked);\n    },\n    getCheckedKeys: function (leafOnly) {\n      return this.store.getCheckedKeys(leafOnly);\n    },\n    getCurrentNode: function () {\n      var currentNode = this.store.getCurrentNode();\n      return currentNode ? currentNode.data : null;\n    },\n    getCurrentKey: function () {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in getCurrentKey');\n      var currentNode = this.getCurrentNode();\n      return currentNode ? currentNode[this.nodeKey] : null;\n    },\n    setCheckedNodes: function (nodes, leafOnly) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCheckedNodes');\n      this.store.setCheckedNodes(nodes, leafOnly);\n    },\n    setCheckedKeys: function (keys, leafOnly) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCheckedKeys');\n      this.store.setCheckedKeys(keys, leafOnly);\n    },\n    setChecked: function (data, checked, deep) {\n      this.store.setChecked(data, checked, deep);\n    },\n    getHalfCheckedNodes: function () {\n      return this.store.getHalfCheckedNodes();\n    },\n    getHalfCheckedKeys: function () {\n      return this.store.getHalfCheckedKeys();\n    },\n    setCurrentNode: function (node) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCurrentNode');\n      this.store.setUserCurrentNode(node);\n    },\n    setCurrentKey: function (key) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCurrentKey');\n      this.store.setCurrentNodeKey(key);\n    },\n    getNode: function (data) {\n      return this.store.getNode(data);\n    },\n    remove: function (data) {\n      this.store.remove(data);\n    },\n    append: function (data, parentNode) {\n      this.store.append(data, parentNode);\n    },\n    insertBefore: function (data, refNode) {\n      this.store.insertBefore(data, refNode);\n    },\n    insertAfter: function (data, refNode) {\n      this.store.insertAfter(data, refNode);\n    },\n    handleNodeExpand: function (nodeData, node, instance) {\n      this.broadcast('ElTreeNode', 'tree-node-expand', node);\n      this.$emit('node-expand', nodeData, node, instance);\n    },\n    updateKeyChildren: function (key, data) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in updateKeyChild');\n      this.store.updateChildren(key, data);\n    },\n    initTabIndex: function () {\n      this.treeItems = this.$el.querySelectorAll('.is-focusable[role=treeitem]');\n      this.checkboxItems = this.$el.querySelectorAll('input[type=checkbox]');\n      var checkedItem = this.$el.querySelectorAll('.is-checked[role=treeitem]');\n\n      if (checkedItem.length) {\n        checkedItem[0].setAttribute('tabindex', 0);\n        return;\n      }\n\n      this.treeItems[0] && this.treeItems[0].setAttribute('tabindex', 0);\n    },\n    handleKeydown: function (ev) {\n      var currentItem = ev.target;\n      if (currentItem.className.indexOf('el-tree-node') === -1) return;\n      var keyCode = ev.keyCode;\n      this.treeItems = this.$el.querySelectorAll('.is-focusable[role=treeitem]');\n      var currentIndex = this.treeItemArray.indexOf(currentItem);\n      var nextIndex;\n\n      if ([38, 40].indexOf(keyCode) > -1) {\n        // up、down\n        ev.preventDefault();\n\n        if (keyCode === 38) {\n          // up\n          nextIndex = currentIndex !== 0 ? currentIndex - 1 : 0;\n        } else {\n          nextIndex = currentIndex < this.treeItemArray.length - 1 ? currentIndex + 1 : 0;\n        }\n\n        this.treeItemArray[nextIndex].focus(); // 选中\n      }\n\n      if ([37, 39].indexOf(keyCode) > -1) {\n        // left、right 展开\n        ev.preventDefault();\n        currentItem.click(); // 选中\n      }\n\n      var hasInput = currentItem.querySelector('[type=\"checkbox\"]');\n\n      if ([13, 32].indexOf(keyCode) > -1 && hasInput) {\n        // space enter选中checkbox\n        ev.preventDefault();\n        hasInput.click();\n      }\n    }\n  },\n  created: function () {\n    var _this = this;\n\n    this.isTree = true;\n    this.store = new TreeStore({\n      key: this.nodeKey,\n      data: this.data,\n      lazy: this.lazy,\n      props: this.props,\n      load: this.load,\n      currentNodeKey: this.currentNodeKey,\n      checkStrictly: this.checkStrictly,\n      checkDescendants: this.checkDescendants,\n      defaultCheckedKeys: this.defaultCheckedKeys,\n      defaultExpandedKeys: this.defaultExpandedKeys,\n      autoExpandParent: this.autoExpandParent,\n      defaultExpandAll: this.defaultExpandAll,\n      filterNodeMethod: this.filterNodeMethod\n    });\n    this.root = this.store.root;\n    var dragState = this.dragState;\n    this.$on('tree-node-drag-start', function (event, treeNode) {\n      if (typeof _this.allowDrag === 'function' && !_this.allowDrag(treeNode.node)) {\n        event.preventDefault();\n        return false;\n      }\n\n      event.dataTransfer.effectAllowed = 'move'; // wrap in try catch to address IE's error when first param is 'text/plain'\n\n      try {\n        // setData is required for draggable to work in FireFox\n        // the content has to be '' so dragging a node out of the tree won't open a new tab in FireFox\n        event.dataTransfer.setData('text/plain', '');\n      } catch (e) {}\n\n      dragState.draggingNode = treeNode;\n\n      _this.$emit('node-drag-start', treeNode.node, event);\n    });\n    this.$on('tree-node-drag-over', function (event, treeNode) {\n      var dropNode = findNearestComponent(event.target, 'ElTreeNode');\n      var oldDropNode = dragState.dropNode;\n\n      if (oldDropNode && oldDropNode !== dropNode) {\n        removeClass(oldDropNode.$el, 'is-drop-inner');\n      }\n\n      var draggingNode = dragState.draggingNode;\n      if (!draggingNode || !dropNode) return;\n      var dropPrev = true;\n      var dropInner = true;\n      var dropNext = true;\n      var userAllowDropInner = true;\n\n      if (typeof _this.allowDrop === 'function') {\n        dropPrev = _this.allowDrop(draggingNode.node, dropNode.node, 'prev');\n        userAllowDropInner = dropInner = _this.allowDrop(draggingNode.node, dropNode.node, 'inner');\n        dropNext = _this.allowDrop(draggingNode.node, dropNode.node, 'next');\n      }\n\n      event.dataTransfer.dropEffect = dropInner ? 'move' : 'none';\n\n      if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {\n        if (oldDropNode) {\n          _this.$emit('node-drag-leave', draggingNode.node, oldDropNode.node, event);\n        }\n\n        _this.$emit('node-drag-enter', draggingNode.node, dropNode.node, event);\n      }\n\n      if (dropPrev || dropInner || dropNext) {\n        dragState.dropNode = dropNode;\n      }\n\n      if (dropNode.node.nextSibling === draggingNode.node) {\n        dropNext = false;\n      }\n\n      if (dropNode.node.previousSibling === draggingNode.node) {\n        dropPrev = false;\n      }\n\n      if (dropNode.node.contains(draggingNode.node, false)) {\n        dropInner = false;\n      }\n\n      if (draggingNode.node === dropNode.node || draggingNode.node.contains(dropNode.node)) {\n        dropPrev = false;\n        dropInner = false;\n        dropNext = false;\n      }\n\n      var targetPosition = dropNode.$el.getBoundingClientRect();\n\n      var treePosition = _this.$el.getBoundingClientRect();\n\n      var dropType;\n      var prevPercent = dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;\n      var nextPercent = dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;\n      var indicatorTop = -9999;\n      var distance = event.clientY - targetPosition.top;\n\n      if (distance < targetPosition.height * prevPercent) {\n        dropType = 'before';\n      } else if (distance > targetPosition.height * nextPercent) {\n        dropType = 'after';\n      } else if (dropInner) {\n        dropType = 'inner';\n      } else {\n        dropType = 'none';\n      }\n\n      var dropIndicator = _this.$refs.dropIndicator;\n\n      if (dropType === 'before') {\n        indicatorTop = targetPosition.top - treePosition.top;\n      } else if (dropType === 'after') {\n        indicatorTop = targetPosition.bottom - treePosition.top;\n      }\n\n      dropIndicator.style.top = indicatorTop + 'px';\n      dropIndicator.style.left = targetPosition.right - treePosition.left + 'px';\n\n      if (dropType === 'inner') {\n        addClass(dropNode.$el, 'is-drop-inner');\n      } else {\n        removeClass(dropNode.$el, 'is-drop-inner');\n      }\n\n      dragState.showDropIndicator = dropType === 'before' || dropType === 'after';\n      dragState.allowDrop = dragState.showDropIndicator || userAllowDropInner;\n      dragState.dropType = dropType;\n\n      _this.$emit('node-drag-over', draggingNode.node, dropNode.node, event);\n    });\n    this.$on('tree-node-drag-end', function (event) {\n      var draggingNode = dragState.draggingNode,\n          dropType = dragState.dropType,\n          dropNode = dragState.dropNode;\n      event.preventDefault();\n      event.dataTransfer.dropEffect = 'move';\n\n      if (draggingNode && dropNode) {\n        var draggingNodeCopy = {\n          data: draggingNode.node.data\n        };\n\n        if (dropType !== 'none') {\n          draggingNode.node.remove();\n        }\n\n        if (dropType === 'before') {\n          dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node);\n        } else if (dropType === 'after') {\n          dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);\n        } else if (dropType === 'inner') {\n          dropNode.node.insertChild(draggingNodeCopy);\n        }\n\n        if (dropType !== 'none') {\n          _this.store.registerNode(draggingNodeCopy);\n        }\n\n        removeClass(dropNode.$el, 'is-drop-inner');\n\n        _this.$emit('node-drag-end', draggingNode.node, dropNode.node, dropType, event);\n\n        if (dropType !== 'none') {\n          _this.$emit('node-drop', draggingNode.node, dropNode.node, dropType, event);\n        }\n      }\n\n      if (draggingNode && !dropNode) {\n        _this.$emit('node-drag-end', draggingNode.node, null, dropType, event);\n      }\n\n      dragState.showDropIndicator = false;\n      dragState.draggingNode = null;\n      dragState.dropNode = null;\n      dragState.allowDrop = true;\n    });\n  },\n  mounted: function () {\n    this.initTabIndex();\n    this.$el.addEventListener('keydown', this.handleKeydown);\n  },\n  updated: function () {\n    this.treeItems = this.$el.querySelectorAll('[role=treeitem]');\n    this.checkboxItems = this.$el.querySelectorAll('input[type=checkbox]');\n  }\n});","map":{"version":3,"sources":["/home/vy/Desktop/B.A.D/bad-system/node_modules/vue-data-tables/node_modules/element-ui/packages/tree/src/tree.vue"],"names":["TreeStore","module","link","v","getNodeKey","findNearestComponent","ElTreeNode","t","emitter","addClass","removeClass","exportDefault","name","mixins","components","data","store","root","currentNode","treeItems","checkboxItems","dragState","showDropIndicator","draggingNode","dropNode","allowDrop","props","type","Array","emptyText","String","renderAfterExpand","Boolean","nodeKey","checkStrictly","defaultExpandAll","expandOnClickNode","checkOnClickNode","checkDescendants","autoExpandParent","defaultCheckedKeys","defaultExpandedKeys","renderContent","Function","showCheckbox","draggable","allowDrag","children","label","icon","disabled","lazy","highlightCurrent","load","filterNodeMethod","accordion","indent","Number","computed","set","value","get","treeItemArray","prototype","slice","call","isEmpty","childNodes","length","every","visible","watch","newVal","setDefaultCheckedKey","setDefaultExpandedKeys","setData","val","forEach","checkbox","setAttribute","methods","filter","Error","node","getNodePath","getNode","path","parent","push","reverse","getCheckedNodes","leafOnly","includeHalfChecked","getCheckedKeys","getCurrentNode","getCurrentKey","setCheckedNodes","nodes","setCheckedKeys","keys","setChecked","checked","deep","getHalfCheckedNodes","getHalfCheckedKeys","setCurrentNode","setUserCurrentNode","setCurrentKey","key","setCurrentNodeKey","remove","append","parentNode","insertBefore","refNode","insertAfter","handleNodeExpand","nodeData","instance","broadcast","$emit","updateKeyChildren","updateChildren","initTabIndex","$el","querySelectorAll","checkedItem","handleKeydown","ev","currentItem","target","className","indexOf","keyCode","currentIndex","nextIndex","preventDefault","focus","click","hasInput","querySelector","created","isTree","currentNodeKey","$on","event","treeNode","dataTransfer","effectAllowed","e","oldDropNode","dropPrev","dropInner","dropNext","userAllowDropInner","dropEffect","nextSibling","previousSibling","contains","targetPosition","getBoundingClientRect","treePosition","dropType","prevPercent","nextPercent","indicatorTop","distance","clientY","top","height","dropIndicator","$refs","bottom","style","left","right","draggingNodeCopy","insertChild","registerNode","mounted","addEventListener","updated"],"mappings":"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","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n  import TreeStore from './model/tree-store';\n  import { getNodeKey, findNearestComponent } from './model/util';\n  import ElTreeNode from './tree-node.vue';\n  import {t} from 'element-ui/src/locale';\n  import emitter from 'element-ui/src/mixins/emitter';\n  import { addClass, removeClass } from 'element-ui/src/utils/dom';\n\n  export default {\n    name: 'ElTree',\n\n    mixins: [emitter],\n\n    components: {\n      ElTreeNode\n    },\n\n    data() {\n      return {\n        store: null,\n        root: null,\n        currentNode: null,\n        treeItems: null,\n        checkboxItems: [],\n        dragState: {\n          showDropIndicator: false,\n          draggingNode: null,\n          dropNode: null,\n          allowDrop: true\n        }\n      };\n    },\n\n    props: {\n      data: {\n        type: Array\n      },\n      emptyText: {\n        type: String,\n        default() {\n          return t('el.tree.emptyText');\n        }\n      },\n      renderAfterExpand: {\n        type: Boolean,\n        default: true\n      },\n      nodeKey: String,\n      checkStrictly: Boolean,\n      defaultExpandAll: Boolean,\n      expandOnClickNode: {\n        type: Boolean,\n        default: true\n      },\n      checkOnClickNode: Boolean,\n      checkDescendants: {\n        type: Boolean,\n        default: false\n      },\n      autoExpandParent: {\n        type: Boolean,\n        default: true\n      },\n      defaultCheckedKeys: Array,\n      defaultExpandedKeys: Array,\n      renderContent: Function,\n      showCheckbox: {\n        type: Boolean,\n        default: false\n      },\n      draggable: {\n        type: Boolean,\n        default: false\n      },\n      allowDrag: Function,\n      allowDrop: Function,\n      props: {\n        default() {\n          return {\n            children: 'children',\n            label: 'label',\n            icon: 'icon',\n            disabled: 'disabled'\n          };\n        }\n      },\n      lazy: {\n        type: Boolean,\n        default: false\n      },\n      highlightCurrent: Boolean,\n      load: Function,\n      filterNodeMethod: Function,\n      accordion: Boolean,\n      indent: {\n        type: Number,\n        default: 18\n      }\n    },\n\n    computed: {\n      children: {\n        set(value) {\n          this.data = value;\n        },\n        get() {\n          return this.data;\n        }\n      },\n\n      treeItemArray() {\n        return Array.prototype.slice.call(this.treeItems);\n      },\n\n      isEmpty() {\n        const { childNodes } = this.root;\n        return !childNodes || childNodes.length === 0 || childNodes.every(({visible}) => !visible);\n      }\n    },\n\n    watch: {\n      defaultCheckedKeys(newVal) {\n        this.store.setDefaultCheckedKey(newVal);\n      },\n\n      defaultExpandedKeys(newVal) {\n        this.store.defaultExpandedKeys = newVal;\n        this.store.setDefaultExpandedKeys(newVal);\n      },\n\n      data(newVal) {\n        this.store.setData(newVal);\n      },\n\n      checkboxItems(val) {\n        Array.prototype.forEach.call(val, (checkbox) => {\n          checkbox.setAttribute('tabindex', -1);\n        });\n      },\n\n      checkStrictly(newVal) {\n        this.store.checkStrictly = newVal;\n      }\n    },\n\n    methods: {\n      filter(value) {\n        if (!this.filterNodeMethod) throw new Error('[Tree] filterNodeMethod is required when filter');\n        this.store.filter(value);\n      },\n\n      getNodeKey(node) {\n        return getNodeKey(this.nodeKey, node.data);\n      },\n\n      getNodePath(data) {\n        if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in getNodePath');\n        const node = this.store.getNode(data);\n        if (!node) return [];\n        const path = [node.data];\n        let parent = node.parent;\n        while (parent && parent !== this.root) {\n          path.push(parent.data);\n          parent = parent.parent;\n        }\n        return path.reverse();\n      },\n\n      getCheckedNodes(leafOnly, includeHalfChecked) {\n        return this.store.getCheckedNodes(leafOnly, includeHalfChecked);\n      },\n\n      getCheckedKeys(leafOnly) {\n        return this.store.getCheckedKeys(leafOnly);\n      },\n\n      getCurrentNode() {\n        const currentNode = this.store.getCurrentNode();\n        return currentNode ? currentNode.data : null;\n      },\n\n      getCurrentKey() {\n        if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in getCurrentKey');\n        const currentNode = this.getCurrentNode();\n        return currentNode ? currentNode[this.nodeKey] : null;\n      },\n\n      setCheckedNodes(nodes, leafOnly) {\n        if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCheckedNodes');\n        this.store.setCheckedNodes(nodes, leafOnly);\n      },\n\n      setCheckedKeys(keys, leafOnly) {\n        if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCheckedKeys');\n        this.store.setCheckedKeys(keys, leafOnly);\n      },\n\n      setChecked(data, checked, deep) {\n        this.store.setChecked(data, checked, deep);\n      },\n\n      getHalfCheckedNodes() {\n        return this.store.getHalfCheckedNodes();\n      },\n\n      getHalfCheckedKeys() {\n        return this.store.getHalfCheckedKeys();\n      },\n\n      setCurrentNode(node) {\n        if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCurrentNode');\n        this.store.setUserCurrentNode(node);\n      },\n\n      setCurrentKey(key) {\n        if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCurrentKey');\n        this.store.setCurrentNodeKey(key);\n      },\n\n      getNode(data) {\n        return this.store.getNode(data);\n      },\n\n      remove(data) {\n        this.store.remove(data);\n      },\n\n      append(data, parentNode) {\n        this.store.append(data, parentNode);\n      },\n\n      insertBefore(data, refNode) {\n        this.store.insertBefore(data, refNode);\n      },\n\n      insertAfter(data, refNode) {\n        this.store.insertAfter(data, refNode);\n      },\n\n      handleNodeExpand(nodeData, node, instance) {\n        this.broadcast('ElTreeNode', 'tree-node-expand', node);\n        this.$emit('node-expand', nodeData, node, instance);\n      },\n\n      updateKeyChildren(key, data) {\n        if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in updateKeyChild');\n        this.store.updateChildren(key, data);\n      },\n\n      initTabIndex() {\n        this.treeItems = this.$el.querySelectorAll('.is-focusable[role=treeitem]');\n        this.checkboxItems = this.$el.querySelectorAll('input[type=checkbox]');\n        const checkedItem = this.$el.querySelectorAll('.is-checked[role=treeitem]');\n        if (checkedItem.length) {\n          checkedItem[0].setAttribute('tabindex', 0);\n          return;\n        }\n        this.treeItems[0] && this.treeItems[0].setAttribute('tabindex', 0);\n      },\n\n      handleKeydown(ev) {\n        const currentItem = ev.target;\n        if (currentItem.className.indexOf('el-tree-node') === -1) return;\n        const keyCode = ev.keyCode;\n        this.treeItems = this.$el.querySelectorAll('.is-focusable[role=treeitem]');\n        const currentIndex = this.treeItemArray.indexOf(currentItem);\n        let nextIndex;\n        if ([38, 40].indexOf(keyCode) > -1) { // up、down\n          ev.preventDefault();\n          if (keyCode === 38) { // up\n            nextIndex = currentIndex !== 0 ? currentIndex - 1 : 0;\n          } else {\n            nextIndex = (currentIndex < this.treeItemArray.length - 1) ? currentIndex + 1 : 0;\n          }\n          this.treeItemArray[nextIndex].focus(); // 选中\n        }\n        if ([37, 39].indexOf(keyCode) > -1) { // left、right 展开\n          ev.preventDefault();\n          currentItem.click(); // 选中\n        }\n        const hasInput = currentItem.querySelector('[type=\"checkbox\"]');\n        if ([13, 32].indexOf(keyCode) > -1 && hasInput) { // space enter选中checkbox\n          ev.preventDefault();\n          hasInput.click();\n        }\n      }\n    },\n\n    created() {\n      this.isTree = true;\n\n      this.store = new TreeStore({\n        key: this.nodeKey,\n        data: this.data,\n        lazy: this.lazy,\n        props: this.props,\n        load: this.load,\n        currentNodeKey: this.currentNodeKey,\n        checkStrictly: this.checkStrictly,\n        checkDescendants: this.checkDescendants,\n        defaultCheckedKeys: this.defaultCheckedKeys,\n        defaultExpandedKeys: this.defaultExpandedKeys,\n        autoExpandParent: this.autoExpandParent,\n        defaultExpandAll: this.defaultExpandAll,\n        filterNodeMethod: this.filterNodeMethod\n      });\n\n      this.root = this.store.root;\n\n      let dragState = this.dragState;\n      this.$on('tree-node-drag-start', (event, treeNode) => {\n        if (typeof this.allowDrag === 'function' && !this.allowDrag(treeNode.node)) {\n          event.preventDefault();\n          return false;\n        }\n        event.dataTransfer.effectAllowed = 'move';\n\n        // wrap in try catch to address IE's error when first param is 'text/plain'\n        try {\n          // setData is required for draggable to work in FireFox\n          // the content has to be '' so dragging a node out of the tree won't open a new tab in FireFox\n          event.dataTransfer.setData('text/plain', '');\n        } catch (e) {}\n        dragState.draggingNode = treeNode;\n        this.$emit('node-drag-start', treeNode.node, event);\n      });\n\n      this.$on('tree-node-drag-over', (event, treeNode) => {\n        const dropNode = findNearestComponent(event.target, 'ElTreeNode');\n        const oldDropNode = dragState.dropNode;\n        if (oldDropNode && oldDropNode !== dropNode) {\n          removeClass(oldDropNode.$el, 'is-drop-inner');\n        }\n        const draggingNode = dragState.draggingNode;\n        if (!draggingNode || !dropNode) return;\n\n        let dropPrev = true;\n        let dropInner = true;\n        let dropNext = true;\n        let userAllowDropInner = true;\n        if (typeof this.allowDrop === 'function') {\n          dropPrev = this.allowDrop(draggingNode.node, dropNode.node, 'prev');\n          userAllowDropInner = dropInner = this.allowDrop(draggingNode.node, dropNode.node, 'inner');\n          dropNext = this.allowDrop(draggingNode.node, dropNode.node, 'next');\n        }\n        event.dataTransfer.dropEffect = dropInner ? 'move' : 'none';\n        if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {\n          if (oldDropNode) {\n            this.$emit('node-drag-leave', draggingNode.node, oldDropNode.node, event);\n          }\n          this.$emit('node-drag-enter', draggingNode.node, dropNode.node, event);\n        }\n\n        if (dropPrev || dropInner || dropNext) {\n          dragState.dropNode = dropNode;\n        }\n\n        if (dropNode.node.nextSibling === draggingNode.node) {\n          dropNext = false;\n        }\n        if (dropNode.node.previousSibling === draggingNode.node) {\n          dropPrev = false;\n        }\n        if (dropNode.node.contains(draggingNode.node, false)) {\n          dropInner = false;\n        }\n        if (draggingNode.node === dropNode.node || draggingNode.node.contains(dropNode.node)) {\n          dropPrev = false;\n          dropInner = false;\n          dropNext = false;\n        }\n\n        const targetPosition = dropNode.$el.getBoundingClientRect();\n        const treePosition = this.$el.getBoundingClientRect();\n\n        let dropType;\n        const prevPercent = dropPrev ? (dropInner ? 0.25 : (dropNext ? 0.45 : 1)) : -1;\n        const nextPercent = dropNext ? (dropInner ? 0.75 : (dropPrev ? 0.55 : 0)) : 1;\n\n        let indicatorTop = -9999;\n        const distance = event.clientY - targetPosition.top;\n        if (distance < targetPosition.height * prevPercent) {\n          dropType = 'before';\n        } else if (distance > targetPosition.height * nextPercent) {\n          dropType = 'after';\n        } else if (dropInner) {\n          dropType = 'inner';\n        } else {\n          dropType = 'none';\n        }\n\n        const dropIndicator = this.$refs.dropIndicator;\n        if (dropType === 'before') {\n          indicatorTop = targetPosition.top - treePosition.top;\n        } else if (dropType === 'after') {\n          indicatorTop = targetPosition.bottom - treePosition.top;\n        }\n        dropIndicator.style.top = indicatorTop + 'px';\n        dropIndicator.style.left = (targetPosition.right - treePosition.left) + 'px';\n\n        if (dropType === 'inner') {\n          addClass(dropNode.$el, 'is-drop-inner');\n        } else {\n          removeClass(dropNode.$el, 'is-drop-inner');\n        }\n\n        dragState.showDropIndicator = dropType === 'before' || dropType === 'after';\n        dragState.allowDrop = dragState.showDropIndicator || userAllowDropInner;\n        dragState.dropType = dropType;\n        this.$emit('node-drag-over', draggingNode.node, dropNode.node, event);\n      });\n\n      this.$on('tree-node-drag-end', (event) => {\n        const { draggingNode, dropType, dropNode } = dragState;\n        event.preventDefault();\n        event.dataTransfer.dropEffect = 'move';\n\n        if (draggingNode && dropNode) {\n          const draggingNodeCopy = { data: draggingNode.node.data };\n          if (dropType !== 'none') {\n            draggingNode.node.remove();\n          }\n          if (dropType === 'before') {\n            dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node);\n          } else if (dropType === 'after') {\n            dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);\n          } else if (dropType === 'inner') {\n            dropNode.node.insertChild(draggingNodeCopy);\n          }\n          if (dropType !== 'none') {\n            this.store.registerNode(draggingNodeCopy);\n          }\n\n          removeClass(dropNode.$el, 'is-drop-inner');\n\n          this.$emit('node-drag-end', draggingNode.node, dropNode.node, dropType, event);\n          if (dropType !== 'none') {\n            this.$emit('node-drop', draggingNode.node, dropNode.node, dropType, event);\n          }\n        }\n        if (draggingNode && !dropNode) {\n          this.$emit('node-drag-end', draggingNode.node, null, dropType, event);\n        }\n\n        dragState.showDropIndicator = false;\n        dragState.draggingNode = null;\n        dragState.dropNode = null;\n        dragState.allowDrop = true;\n      });\n    },\n\n    mounted() {\n      this.initTabIndex();\n      this.$el.addEventListener('keydown', this.handleKeydown);\n    },\n\n    updated() {\n      this.treeItems = this.$el.querySelectorAll('[role=treeitem]');\n      this.checkboxItems = this.$el.querySelectorAll('input[type=checkbox]');\n    }\n  };\n"]},"sourceType":"script","hash":"01ae78a8adba7b4e3fb42ec222141ae5ae1581d4"}
